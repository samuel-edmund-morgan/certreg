name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: certreg
          MYSQL_USER: certuser
          MYSQL_PASSWORD: certpass
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: gd, mbstring, xml, pdo_mysql
          coverage: none

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y libjpeg-dev libpng-dev

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -uroot -proot -e 'SELECT 1' >/dev/null 2>&1; then echo "MySQL up"; break; fi; sleep 2; done

      - name: Create schema
        run: |
          mysql -h 127.0.0.1 -uroot -proot <<'SQL'
          CREATE DATABASE IF NOT EXISTS certreg CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
          CREATE USER IF NOT EXISTS 'certuser'@'%' IDENTIFIED BY 'certpass';
          GRANT ALL PRIVILEGES ON certreg.* TO 'certuser'@'%';
          FLUSH PRIVILEGES;
          USE certreg;
          CREATE TABLE IF NOT EXISTS creds (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(64) NOT NULL UNIQUE,
            passhash VARCHAR(255) NOT NULL
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          CREATE TABLE IF NOT EXISTS tokens (
            id INT AUTO_INCREMENT PRIMARY KEY,
            cid VARCHAR(64) NOT NULL,
            version TINYINT NOT NULL DEFAULT 1,
            h CHAR(64) NOT NULL,
            extra_info VARCHAR(255) DEFAULT NULL,
            issued_date DATE DEFAULT NULL,
            valid_until DATE DEFAULT NULL,
            revoked_at DATETIME DEFAULT NULL,
            revoke_reason VARCHAR(255) DEFAULT NULL,
            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            lookup_count BIGINT UNSIGNED NOT NULL DEFAULT 0,
            last_lookup_at DATETIME NULL,
            UNIQUE KEY uq_tokens_cid (cid),
            UNIQUE KEY uq_tokens_h (h),
            KEY idx_tokens_revoked_at (revoked_at),
            KEY idx_tokens_created_at (created_at)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          CREATE TABLE IF NOT EXISTS token_events (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            cid VARCHAR(64) NOT NULL,
            event_type ENUM('revoke','unrevoke','delete','create','lookup') NOT NULL,
            reason VARCHAR(255) NULL,
            admin_id INT NULL,
            admin_user VARCHAR(64) NULL,
            prev_revoked_at DATETIME NULL,
            prev_revoke_reason VARCHAR(255) NULL,
            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_cid (cid),
            INDEX idx_event (event_type),
            INDEX idx_created (created_at)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          -- Ensure composite index for better chronological queries by cid (portable way)
          SET @exists := (
            SELECT COUNT(1) FROM INFORMATION_SCHEMA.STATISTICS
            WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'token_events' AND INDEX_NAME = 'idx_token_events_cid_created_at'
          );
          SET @sql := IF(@exists=0, 'CREATE INDEX idx_token_events_cid_created_at ON token_events(cid, created_at);', 'SELECT 1');
          PREPARE stmt FROM @sql; EXECUTE stmt; DEALLOCATE PREPARE stmt;

          -- Minimal multi-org schema to support templates and template_id
          CREATE TABLE IF NOT EXISTS organizations (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(160) NOT NULL,
            code VARCHAR(32) NOT NULL UNIQUE,
            is_active TINYINT(1) NOT NULL DEFAULT 1,
            primary_color VARCHAR(7) NULL,
            accent_color VARCHAR(7) NULL,
            secondary_color VARCHAR(7) NULL,
            footer_text VARCHAR(255) NULL,
            support_contact VARCHAR(255) NULL
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          INSERT INTO organizations (id,name,code,is_active) VALUES (1,'Test Org','ORG-CERT',1)
            ON DUPLICATE KEY UPDATE name=VALUES(name), code=VALUES(code), is_active=VALUES(is_active);

          CREATE TABLE IF NOT EXISTS templates (
            id INT AUTO_INCREMENT PRIMARY KEY,
            org_id INT NOT NULL,
            name VARCHAR(160) NOT NULL,
            code VARCHAR(60) NOT NULL,
            status ENUM('active','inactive','archived') DEFAULT 'active',
            filename VARCHAR(255) NULL,
            file_ext VARCHAR(10) NULL,
            file_hash CHAR(64) NULL,
            file_size INT NULL,
            width INT NULL,
            height INT NULL,
            version INT NOT NULL DEFAULT 1,
            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            KEY idx_org_status (org_id, status)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

          -- Add tokens.template_id to enable template linkage in UI (safe if already present)
          SET @has_tpl := (
            SELECT COUNT(1) FROM INFORMATION_SCHEMA.COLUMNS
            WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'tokens' AND COLUMN_NAME = 'template_id'
          );
          SET @sql2 := IF(@has_tpl=0, 'ALTER TABLE tokens ADD COLUMN template_id INT NULL', 'SELECT 1');
          PREPARE stmt2 FROM @sql2; EXECUTE stmt2; DEALLOCATE PREPARE stmt2;
          -- Index on tokens(template_id) for faster filters
          SET @has_idx := (
            SELECT COUNT(1) FROM INFORMATION_SCHEMA.STATISTICS
            WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'tokens' AND INDEX_NAME = 'idx_tokens_template_id'
          );
          SET @sql3 := IF(@has_idx=0, 'CREATE INDEX idx_tokens_template_id ON tokens(template_id)', 'SELECT 1');
          PREPARE stmt3 FROM @sql3; EXECUTE stmt3; DEALLOCATE PREPARE stmt3;
          SQL

      - name: Prepare config.php
        run: |
          cp config.php.example config.php
          sed -i "s/enter-db-name/certreg/" config.php
          sed -i "s/enter-db-username/certuser/" config.php
          sed -i "s/enter-db-password/certpass/" config.php

      - name: Create test admin
        run: php tests/create_test_admin.php || true

      - name: Run backend tests
        run: |
          php tests/run_tests.php
          php tests/lookup_count_test.php
          php self_check.php

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Node deps
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run UI tests
        env:
          CERTREG_TEST_MODE: '1'
        run: npx playwright test

      - name: Upload Playwright report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

  headers-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Prepare config.php
        run: |
          cp config.php.example config.php
          sed -i "s/enter-db-name/testdb/" config.php
          sed -i "s/enter-db-username/testuser/" config.php
          sed -i "s/enter-db-password/testpass/" config.php

      - name: Start PHP server
        working-directory: .
        run: |
          php -S 127.0.0.1:8080 -t . >/tmp/php-server.log 2>&1 &
          echo $! > /tmp/php-server.pid
          for i in {1..40}; do curl -sS -I http://127.0.0.1:8080/ >/dev/null && break; sleep 0.5; done

      - name: Run headers check
        env:
          BASE_URL: http://127.0.0.1:8080
          ENDPOINTS: "/verify.php /index.php"
        run: bash scripts/security/check_headers.sh || { echo '--- PHP server log ---'; cat /tmp/php-server.log; exit 1; }

      - name: Stop PHP server
        if: always()
        run: |
          kill $(cat /tmp/php-server.pid) || true
          sleep 0.2
